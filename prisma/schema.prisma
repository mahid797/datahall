generator client {
  provider = "prisma-client-js"
  seed     = "prisma/seed.ts"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Temporary disabled ArchivedUser model - Can re-enable later when we have Delete User functionality
// model ArchivedUser {
//   id         Int      @id @default(autoincrement())
//   userId    String   @unique @default(uuid())
//   first_name String   @default("")
//   last_name  String   @default("")
//   email      String   @unique @default("")
//   password   String
//   created_at DateTime @default(now()) @db.Timestamptz(6)
//   role       UserRole @default(USER)
//   address    String?  @default("")
// }

/**
 * ---------------------------  Auth & Users  ---------------------------
 */

model PasswordResetToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique @default(uuid())
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  resetAt   DateTime? @db.Timestamptz(6)

  userId String
  user   User   @relation(fields: [userId], references: [userId])

  @@index([userId])
}

model User {
  id                Int          @id @default(autoincrement())
  userId            String       @unique
  authProvider      AuthProvider @default(CREDENTIALS)
  auth0Sub          String?      @unique
  firstName         String       @default("")
  lastName          String       @default("")
  email             String       @unique @db.VarChar(320)
  password          String?
  avatarUrl         String? // Supabase path; e.g. "assets/{userId}/avatar/12345.png"
  createdAt         DateTime     @default(now()) @db.Timestamptz(6)
  role              UserRole     @default(USER)
  status            Status       @default(UNVERIFIED)
  verificationToken String?
  tokenExpiresAt    DateTime?
  updatedAt         DateTime     @updatedAt @db.Timestamptz(6)

  // relations
  passwordResetTokens PasswordResetToken[]
  documents           Document[]
  documentLinks       DocumentLink[]
  accountSetting      AccountSetting?

  @@index([email])
}

enum AuthProvider {
  CREDENTIALS
  AUTH0
  GOOGLE // future expansion
}

enum Status {
  ACTIVE
  ARCHIVED
  UNVERIFIED
}

enum UserRole {
  USER
  ADMIN
  MEMBER // future Teams expansion
}

/**
 * ---------------------------  Documents  ---------------------------
 */

model Document {
  id         Int      @id @default(autoincrement())
  documentId String   @unique @default(uuid())
  userId     String
  fileName   String
  filePath   String   @db.Text
  fileType   String
  size       Int
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt @db.Timestamptz(6)

  user          User                @relation(fields: [userId], references: [userId], onDelete: Cascade)
  documentLinks DocumentLink[]
  analytics     DocumentAnalytics[]

  @@index([userId])
}

/**
 * ---------------------------  Sharing Links  ---------------------------
 */

model DocumentLink {
  id              Int       @id @default(autoincrement())
  documentLinkId  String    @unique
  documentId      String
  createdByUserId String
  alias           String? // friendly name (optional)
  isPublic        Boolean   @default(false)
  expirationTime  DateTime?
  password        String?
  visitorFields   Json
  createdAt       DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime  @updatedAt @db.Timestamptz(6)

  // relations
  document  Document              @relation(fields: [documentId], references: [documentId], onDelete: Cascade)
  creator   User                  @relation(fields: [createdByUserId], references: [userId], onDelete: Cascade)
  visitors  DocumentLinkVisitor[]
  analytics DocumentAnalytics[]

  // constraints & indexes
  @@unique([documentId, alias], name: "document_alias_unique") // Composite uniqueness: alias must be unique only within its document
  @@index([documentId])
  @@index([createdByUserId])
}

model DocumentLinkVisitor {
  id              Int      @id @default(autoincrement())
  documentLinkId  String
  firstName       String   @default("")
  lastName        String   @default("")
  email           String   @default("") @db.VarChar(320)
  visitorMetaData Json?
  visitedAt       DateTime @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime @updatedAt @db.Timestamptz(6)

  documentLink DocumentLink        @relation(fields: [documentLinkId], references: [documentLinkId], onDelete: Cascade)
  analytics    DocumentAnalytics[]

  @@index([documentLinkId, visitedAt])
}

model DocumentAnalytics {
  id             Int                @id @default(autoincrement())
  documentId     String
  documentLinkId String?
  visitorId      Int?
  eventType      AnalyticsEventType
  meta           Json?
  timestamp      DateTime           @default(now()) @db.Timestamptz(6)
  minuteBucket   DateTime           @default(dbgenerated("date_trunc('minute', now())")) @db.Timestamptz(6) // ⬅️  rounds to the minute for de-duplication

  // relations
  visitor      DocumentLinkVisitor? @relation(fields: [visitorId], references: [id], onDelete: Cascade)
  document     Document             @relation(fields: [documentId], references: [documentId], onDelete: Cascade)
  documentLink DocumentLink?        @relation(fields: [documentLinkId], references: [documentLinkId], onDelete: Cascade)

  // constraints & indexes
  @@unique([visitorId, documentLinkId, eventType, minuteBucket])
  @@index([documentId, eventType])
  @@index([documentLinkId, eventType])
}

enum AnalyticsEventType {
  VIEW
  DOWNLOAD
}

/**
 * ---------------------------  Branding & Layout settings  ---------------------------
 */
model AccountSetting {
  id               String  @id @default(cuid())
  userId           String  @unique
  logoUrl          String? // Supabase path; e.g. "assets/{userId}/logo/12345.png"
  displayName      String? // Optional “John Doe”
  primaryColor     String  @default("#3f51b5") // Hex; used when themePreset = NULL
  themePreset      String? // "indigo" | "teal" | "crimson" | …
  bgPreset         String  @default("white") // "white" | "softGrey" | "tinted"
  showPersonalInfo Boolean @default(false) // Toggle avatar + name in header

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  // relations
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
}
