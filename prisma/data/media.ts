import { faker } from '@faker-js/faker';
import axios from 'axios';
import PDFDocument from 'pdfkit';

import { storageService } from '@/services';

const bucketName = process.env.SUPABASE_STORAGE_BUCKET as string;

/* ------------------------------------------------------------------ */
/* 1 · Bucket hygiene – wipe old demo objects (non-prod only)          */
/* ------------------------------------------------------------------ */
export async function emptyStorageBucket(): Promise<void> {
	try {
		const paths = await storageService.listFiles();
		if (!paths.length) return;

		await Promise.all(paths.map((p) => storageService.deleteFile(p)));
		console.log(`➤ cleared ${paths.length} objects from ${bucketName}`);
	} catch (err) {
		console.warn('⚠️  Could not empty storage bucket:', err);
	}
}

/* ------------------------------------------------------------------ */
/* 2 · PDF helper (2–3 pages of Faker content)                         */
/* ------------------------------------------------------------------ */
async function buildPdf(title: string): Promise<{
	buffer: Buffer;
	fileName: string;
	fileType: string;
}> {
	const doc = new PDFDocument({ size: 'A4', margin: 50 });
	const chunks: Buffer[] = [];

	doc.on('data', (c) => chunks.push(c));

	// ---------- Page 1 ----------
	doc.fontSize(24).text(title, { align: 'center' });
	doc.moveDown();
	doc.fontSize(12).text('— generated by seed script —', { align: 'center' });
	doc.moveDown();
	doc.fontSize(14).text(faker.company.buzzPhrase(), { underline: true });
	doc.moveDown();
	doc.fontSize(11).text(faker.lorem.paragraphs({ min: 4, max: 8 }));
	doc.addPage();

	// ---------- Page 2 ----------
	doc.fontSize(14).text('Introduction', { underline: true });
	doc.moveDown();
	doc.fontSize(11).text(faker.lorem.paragraphs(2));

	// Optional 3rd page
	if (faker.datatype.boolean(0.5)) {
		doc.addPage();
		doc.fontSize(14).text('Details', { underline: true });
		doc.moveDown();
		doc.fontSize(11).text(faker.lorem.paragraphs(3));
	}

	doc.end();
	await new Promise((r) => doc.on('end', r));
	const buffer = Buffer.concat(chunks);

	const slug = faker.helpers.slugify(title).toLowerCase();
	return { buffer, fileName: `${slug}.pdf`, fileType: 'application/pdf' };
}

const downloadWithRetry = async (url: string, retries = 3): Promise<ArrayBuffer> => {
	for (let attempt = 1; attempt <= retries; attempt++) {
		try {
			const { data } = await axios.get<ArrayBuffer>(url, {
				responseType: 'arraybuffer',
				timeout: 5_000,
			});
			return data;
		} catch (err) {
			if (attempt === retries) throw err; // bubble on last try
			await new Promise((r) => setTimeout(r, 400 * attempt)); // back-off
		}
	}
	// never reached
	throw new Error('unreachable');
};

/* ------------------------------------------------------------------ */
/* 3 · Image helper – grabs a Picsum JPEG                              */
/* ------------------------------------------------------------------ */
async function buildImage(): Promise<{
	buffer: Buffer;
	fileName: string;
	fileType: string;
}> {
	const data = await downloadWithRetry(
		`https://picsum.photos/seed/${faker.string.nanoid(8)}/600/400`,
	);
	const fileName =
		`${faker.word.adjective()}-${faker.word.noun()}-${faker.string.nanoid(6)}.jpeg`.toLowerCase();

	return { buffer: Buffer.from(data), fileName, fileType: 'image/jpeg' };
}

/* ------------------------------------------------------------------ */
/* 4 · Unified builder + uploader                                      */
/* ------------------------------------------------------------------ */
export async function buildAndUploadMedia(
	userId: string,
	baseTitle: string,
): Promise<{
	fileName: string;
	filePath: string;
	fileType: string;
	size: number;
}> {
	/* 40 % chance of image, else PDF */
	const create = faker.datatype.boolean(0.4) ? buildImage : () => buildPdf(baseTitle);
	const { buffer, fileName, fileType } = await create();
	const size = buffer.byteLength;
	const filePath = await storageService.uploadFile(buffer, { fileName, userId, fileType });

	return { fileName, filePath, fileType, size };
}
